---
title: "Ggplot_practice"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Ggplot_practice
```{r}
#attaching packages

#| warning: false
#| message: false
# General use packages:
library(tidyverse)
library(here)
library(janitor)
```


##ggplot basics 
```{r}
# data
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```
# the essentials 
- data 
- aethesitics 
- geometery 

```{r}
# the essentials 3 ways 
# first: data and aesthetics stay consistent throughout plot  
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point()

#second: data stays consistent through plot 
ggplot(data = lizards) + 
  geom_point(aes(x = total_length, 
                 y = weight))

# thrid: nothing stays consistent 
ggplot() + 
  geom_point(data = lizards, 
             aes(x = total_length, 
                 y = weight))
```

# Swap out geometrics 
```{r}
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_line()
```

some geomertry only needs one axis 
```{r}
ggplot(data = lizards, 
       aes(x = total_length)) + 
  geom_histogram()
```

jitterplots usually are best with one categorical and one continous variable 
```{r}
ggplot(data = lizards, 
       aes(x = weight, 
           y = common_name)) + 
  geom_jitter()
```

## Aesthetic mapping 

###updating based on a constant value 
Don't need to use the `aes()` function 

```{r}
ggplot(data = lizards, 
       aes(x = weight)) + 
  geom_histogram(color = "#F93943", 
                 fill = "purple", 
                 alpha = 0.5, 
                 linetype = "dotted")


```

## updating aesthetics based on variables 
In the case, we need to use the aes() function 

```{r}
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point(aes(color = common_name), 
             alpha = 0.3)
```

# Themes 

```{r}
ggplot(data = lizards, 
       aes(x = weight, 
           y = site)) + 
  geom_jitter(aes(color = common_name), 
              alpha = 0.5) + 
  theme_light() + 
  theme(plot.title = element_text(hjust = 1)) +
  labs(x = "Weight (g)", 
       y = "Study Site", 
       title = "Lizard weights across sites at Jornada", 
       color = "Species")
```

## reorder data 
```{r}
lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts, 
       aes(x = n, 
           y = fct_reorder(common_name, n))) + 
  geom_col() + 
  labs(x = "Indiviudals (n)", 
       y = "Species common name")


```


# advanced ggplot custimization 

## scale_
```{r}
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point() + 
  scale_x_continuous(breaks = c(0,250,500), #directly determined breaks 
                     limits = c(0, 500)) +  #min and max of the axis 
  scale_y_continuous(breaks = seq(from = 0,
                                  to = 70,
                                  by = 10),
                     limits = c(0,70)) + 
  labs (x = "Total length (mm)", 
        y = "Weight (grams)") + 
  theme_minimal()
```

```{r}
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point() + 
  scale_x_log10()
```

```{r}
# store date as date 
# counting up number of lizards caught per day 
lizard_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(data = lizard_counts, 
       aes(x = date, 
           y = n)) + 
  geom_line() + 
  scale_x_date(breaks = scales::breaks_width("2 years"), 
               labels = scales::label_date("%Y"))
```

### Customization of aestheic with `scale` functions 

```{r}
# color gradient with 2 colors 
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point(aes(color = weight), 
             alpha = 0.7) + 
  scale_color_gradient(low = "red", high = "navy")
```

```{r}
# color gradient with more than 2 colors 
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point(aes(color = weight), 
             alpha = 0.7) + 
  scale_color_gradientn(colors = c("orange", "red", "purple", "navy", "black"))
```

```{r}
# color gradient of color bins
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point(aes(color = weight), 
             alpha = 0.7) + 
  scale_color_steps(low = "red", high = "navy",
                    breaks = seq(0,80, by = 5))
```

```{r}
ggplot(data = lizards, 
       aes(x = common_name, 
           y = total_length)) + 
  geom_boxplot(aes(fill = common_name), 
               show.legend = FALSE) + 
  coord_flip()
```

```{r}
library(paletteer)

lizard_mean <- lizards %>% 
  mutate(common_name = fct_reorder(common_name, total_length, .fun=mean))


ggplot(data = lizard_mean, 
       aes(y = common_name, 
           x = total_length)) + 
  geom_boxplot(aes(fill = common_name), 
               show.legend = FALSE) + 
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") + 
  labs(x = "Total length (mm)", 
       y = "Species") +
  theme_minimal() 
```

```{r}
ggplot(data = lizard_mean, 
       aes(y = common_name, 
           x = total_length)) + 
  geom_boxplot(aes(fill = common_name), 
               show.legend = FALSE) + 
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") + 
  labs(x = "Total length (mm)", 
       y = "Species") +
  theme_minimal() + 
  theme(panel.grid.minor = element_blank())
```

# patchwork to create compound figures 
```{r}
library(patchwork)

# saving plots as objects 

p1 <- ggplot(data = lizard_mean, 
       aes(y = common_name, 
           x = total_length)) + 
  geom_boxplot(aes(fill = common_name), 
               show.legend = FALSE) + 
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") + 
  labs(x = "Total length (mm)", 
       y = "Species") +
  theme_minimal() + 
  theme(panel.grid.minor = element_blank())


p2 <- ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point(aes(color = weight), 
             alpha = 0.7) + 
  scale_color_steps(low = "red", high = "navy",
                    breaks = seq(0,80, by = 5))


```

```{r}
# "|" puts plots next to eachother 
(p1 | p2) & theme_minimal()

# "/" puts plots ontop of eachother 
(p1 / p2)

# combinations of next to and ontop of each other 
p3 <- ((p1 | p2) / p2) & theme_minimal()

ggsave("test.png", p3)
```

